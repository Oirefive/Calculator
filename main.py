#------------------ Баннер -----------------#

def banner(): # Функция баннера.
	print('''
          Калькулятор
████████████████████████████████
████░░██░░░░██░░████████████████
██░░██░░████░░██░░██████████████
░░██░░██░░░░██░░██░░████████████
░░██░░████░░██░░██░░░░██████████
██░░░░░░░░██░░░░░░░░██░░████████
██████░░██░░████░░██░░██░░██████
████░░██░░░░██████░░░░██░░██████
████░░████████████████░░████████
██████░░██░░░░░░░░░░██░░████████
████████░░░░██████░░░░██████████
██░░░░████░░░░░░░░░░████████████
██░░██░░████████████████████████
██░░░░██████░░████░░░░░░████████
██░░██░░██░░██░░████░░██████████
██░░░░██████░░██████░░██████████
#------------------------------#''')

#------------- Калькулятор -----------------#

# Операторы:
OP = {
    '+': (1, lambda x, y: x + y),
    '-': (1, lambda x, y: x - y),
    '*': (2, lambda x, y: x * y),
    '/': (2, lambda x, y: x / y)
    } 

# Функция. Ждет пример.
def func(example):

    # Вызываем функцию, если юзверь вводит не целые числа.
    def user(a): 
        while a < 100:                          # Повторять код ниже, пока "a" не сравняется с числом "100".
            print('Юзверь, используй целые числа! ЦЕЛЫЕ ЧИСЛА! Ответ ниже неверный!')     
            a += 1                              # a = a+1
            if a == 100:                        # Если "a" сравнялось с числом "100", исполнить код ниже:
                print('Надеюсь, понятно.')      # Вывод текста.
                print('')                       # Вывод текста.
                print('Ответ ниже - неверный!') # Вывод текста.
                break                           # Закончить работу.
            
    # Вызываем функцию. Парсинг.
    def parse(example_string): 
        a = ''                          # Переменная a. Сюда записываем пример.
        for s in example_string:        # Просмотр "Каждого символа" в "example_string"
            if s in '1234567890':       # Если какой-то символ является: "1,2,3,4,5,6,7,8,9,0", то исполнять:
                a += s                  # Записываем пример.
            elif s in '.':              # Если "Символ в примере" == ".", то исполнять:
                user(0)                 # Вызываем функцию user(). Юзверь написал не целое число!
            elif a:                     # Если "Пример", то исполнять:
                yield float(a)          # Записывает значение из "Числа с плавающей точкой".
                a = ''                  # Слишком много писать. Не буду комментировать.
            if s in OP or s in "()":    # Если "Символ" в "example_string" равен оператору (OP) или "Символ" равен "()", то исполнить код ниже:  
                yield s                 # Записывает значение из "Каждого символа".
        if a:                           # Если "Пример", то исполнять: 
            yield float(a)              # Записывает значение из "Числа с плавающей точкой".
            
    # *Вызываем функцию. Парсим пример (Последний в скобочках).
    def parsed_example_(parsed_example):
        stack = []                      # Стек. 
        for s1 in parsed_example:       # Просмотр каждого символа в parsed_example.
            if s1 in OP:                # Если "Какой-то символ" является оператором (OP), то исполнять:
                while stack and stack[-1] != "(" and OP[s1][0] <= OP[stack[-1]][0]: # Вкратце. Если stack и последний символ stack не равен, то исполнять.
                    yield stack.pop()   # Записывает значение из "stack.pop()".
                stack.append(s1)        # Добавить "Какой-то символ" в список
            elif s1 == ")":             # Если "Какой-то символ" равен ")", то исполнять:
                while stack:            # Если "Какой-то символ", то исполнять: 
                    x = stack.pop()     # "X" теперь "stack.pop()", тобишь возвращает элемент "stack"
                    if x == "(":        # Если "X" равно "(", то исполнять:
                        break           # Закончить работу.
                    yield x             # Записывает значение из "X"
            elif s1 == "(":             # Если "Какой-то символ" равен "(", то исполнять:
                stack.append(s1)        # Добавить "Какой-то символ" в список
            else:                       # Выполнить код ниже, если ни одно из условий if или elif не было истинным.
                yield s1                # Записывает значение из "Какой-то символ"
        while stack:                    # Если "Какой-то символ", то исполнять: 
            yield stack.pop()           # Записывает значение из "stack.pop()"

    # *Вызываем функцию. 
    def calc(RevPolNot):     
        stack = []                                  # Стек.
        for s1 in RevPolNot:                        # Если "Какой-то символ" в "Обратная польская запись", то исполнять:
            if s1 in OP:                            # Если "Какой-то символ" является оператором (OP), то исполнять:
                y, x = stack.pop(), stack.pop()     # Присвоение из стека.
                stack.append(OP[s1][1](x, y))       # Вкратце ответ.
            else:                                   # Выполнить код ниже, если оператор не найден.
                stack.append(s1)                    # Добавить "Ответ" в список.   

                
       #         Result = str(stack[0])              # Переводим "Ответ" в str. Производим присвоение
       # return Result[:Result.find('.')]            # Вывести измененное значение ответа. Тобишь не "1 + 1 = 2.0", а "1 + 1 = 2"   

        
        return stack[0]                             # Вывести значение "Первое число в stack, тобишь ответ"
    return calc(parsed_example_(parse(example)))    # Вывести "ОТВЕТ"
    
    

def main():
    banner();                               # Печатаем в консоль баннер
    print('Введите пример!')                # Вывод текста.
    example = input('> ').replace(' ', '')  # Создает пример.
    #example = '10+(3/3)+(3*(3*3))'         # Временно. Создает пример. ОТВЕТ: 38
    
    
    # Для удобства чтения кода создам переменные.
    Result = str(func(example))                     # Запускаем функцию решения примера. Переводим "Ответ" в str. Производим присвоение. 
    Result1 = Result[:Result.find('.')]             # Символы в ответе после точки не засчитываются.
    Result2 = '{0}={1}'.format(example, Result1)    # Объединяем пример с ответом и убираем пробелы из ответа.
    print('|%|', Result2, '|%|')    # Вызов функции решения примера. Вывод примера(example). Вывод ответа(значение после точки не выводится).
    
main() # Запуск программы.